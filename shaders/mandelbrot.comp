#version 450
#extension GL_ARB_separate_shader_objects : enable

layout(local_size_x = 16, local_size_y = 16) in;
layout(rgba32f, set = 0, binding = 0) uniform image2D img_output;

/**
 *
 */
struct mandelbrot_param_t {
	ivec2 windowSize; // TOOD remove
	vec2 pos;
	vec2 mousePos;
	float zoom; /*  */
	float c;	/*  */
	int nrSamples;
};

layout(set = 0, binding = 1) uniform params { mandelbrot_param_t _params; }
u_pushConstants;

vec2 squareImaginary(vec2 number) { return vec2(pow(number.x, 2) - pow(number.y, 2), 2 * number.x * number.y); }

vec4 computeMandel(vec2 uv) {

	const int samples = u_pushConstants._params.nrSamples;
	const float lthreadhold = 2.0;

	vec2 mouseOffset = u_pushConstants._params.mousePos / imageSize(img_output);
	uv += mouseOffset;
	uv *= u_pushConstants._params.zoom;
	const vec2 c = vec2(-.445, 0.0) + vec2(uv - 0.5) * vec2(2.0 + 1.7 * 0.2);
	vec2 z = vec2(0, 0);
	float n = 0;

	for (int i = 0; i < samples; i++) {

		z = squareImaginary(z) + c;
		/*  */
		if (dot(z, z) > (lthreadhold * 2.0)) {
			break;
		}
		//			break;
		n += 1.0;
	}

	float t = float(n) / float(samples);
	vec3 d = vec3(0.3, 0.3, 0.5);
	vec3 e = vec3(-0.2, -0.3, -0.5);
	vec3 f = vec3(2.1, 2.0, 3.0);
	vec3 g = vec3(0.0, 0.1, 0.0);
	return vec4(d + e * cos(6.28318 * (f * t + g)), 1.0);
}

void main() {

	if (any(greaterThan(gl_GlobalInvocationID.xy, imageSize(img_output))))
		return;

	ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);

	vec2 uv = vec2(pixel_coords) / imageSize(img_output); // ivec2(1280, 720);

	vec4 pixel = computeMandel(uv);
	imageStore(img_output, pixel_coords, pixel);
}