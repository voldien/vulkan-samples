#version 450
#extension GL_ARB_separate_shader_objects : enable

layout(local_size_x = 1, local_size_y = 1) in;
layout(rgba32f, binding = 0) uniform image2D img_output;

/**
 *
 */
struct mandelbrot_param_t{
	float x;        /*  */
	float y;        /*  */
	float zoom;     /*  */
	float c;        /*  */
	int nrSamples;
};

layout(set = 0, binding = 1) uniform params{
	mandelbrot_param_t _params;
};

vec4 computeMandel(const ivec2 dim, const ivec2 coord) {
    int i;

    const int samples = 16;
    const float lthreadhold = 2.0;

    vec2 complex = vec2(0);// convert_float2(coord) / convert_float2(dim);
    const vec2 c = vec2(1, 0);

   for(i = 0; i < samples; i++){

       complex = (complex.x * complex.x + complex.y + complex.y, 2 * complex.y * complex.x) + c;

        /*  */
        if(length(complex) < lthreadhold){
            return vec4(complex.x, complex.y, 0.0, 0.0f);
        }
    }
    return vec4(0.0f, 0.0f, 0.0f, 0.0f);
}

void main()
{
	// const int gx = gl_GlobalInvocationID.x;
	// const int gy = gl_GlobalInvocationID.y;

	ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);

	vec4 pixel = computeMandel(pixel_coords, pixel_coords);
    imageStore(img_output, pixel_coords, pixel);
}