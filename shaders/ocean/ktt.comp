#version 450
#extension GL_ARB_separate_shader_objects : enable

layout(local_size_x = 64, local_size_y = 1) in;

struct particle_t {
	vec2 h0;
    vec2 ht_real_img;
};

layout(std430, set = 0, binding = 0) buffer Positions { particle_t pos[]; }
positions;

// This is 4352 bytes
shared float lds[1088];

//__global float *greal, __global float *gimag

void main() {

	// uint gid = gl_GlobalInvocationID.x
	// uint me = gid & 0x3fU;
	// uint dg = (me << 2) + (gid >> 6) * VSTRIDE;
	// __global float4 *gr = (__global float4 *)(greal + dg);
	// __global float4 *gi = (__global float4 *)(gimag + dg);
	// float4 float4 float4 float4 zr0 zr1 zr2 zr3 = = = = gr[0 * 64];
	// gr[1 * 64];
	// gr[2 * 64];
	// gr[3 * 64];
	// float4 float4 float4 float4 zi0 zi1 zi2 zi3 = = = = gi[0 * 64];
	// gi[1 * 64];
	// gi[2 * 64];
	// gi[3 * 64];
}

// vec4 k_sincos4(int4 i, vec4 *cretp) {
// 	i -= (i > 512) & 1024;
// 	vec4 x = vec4(i) * -ANGLE;
// 	*cretp = native_cos(x);
// 	return native_sin(x);
// }