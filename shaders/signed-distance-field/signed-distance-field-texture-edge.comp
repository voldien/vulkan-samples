#version 450
#extension GL_ARB_separate_shader_objects : enable

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
layout(r32f, set = 0, binding = 0) uniform image2D img_output;

layout(set = 0, binding = 0) buffer image_data {
	int nrLinearInqualities;
	vec3 inequalities[];
}
linearInqualities;

float lineSegmentDistance(vec2 point, vec2 p0, vec2 p1) {
	float t = dot(point - p0, p1 - p0) / dot(p1 - p0, p1 - p0);
	vec2 pIntersect = mix(p0, p1, t);
	return distance(point, pIntersect);
}

void computeSDF(in const ivec3 SDF_pixel_coord) {

	float d = 1000000000;
	vec4 sdf_pixel = vec4(1, 1, 1, 1);

	for (int i = 0; i < linearInqualities.nrLinearInqualities; i++) {
		float edistance = lineSegmentDistance(SDF_pixel_coord.xy, linearInqualities.inequalities[0].xy,
											  linearInqualities.inequalities[1].xy);
		d = min(d, edistance);
	}

	sdf_pixel = vec4(d);

	// /*  Write pixel.    */
	imageStore(img_output, SDF_pixel_coord.xy, sdf_pixel);
}

void main() {

	ivec3 world_compute_ID = ivec3(gl_GlobalInvocationID.xyz);

	/*  Make sure it does not exceeded the work group size. */
	if (any(greaterThan(world_compute_ID.xy, imageSize(img_output))))
		return;

	ivec2 sdfImageSize = imageSize(img_output);
	const ivec3 nrLocalPixelElements = ivec3(sdfImageSize, 0) / ivec3(gl_WorkGroupSize.xyz);

	for (int x = 0; x < nrLocalPixelElements.x; x++) {
		for (int y = 0; y < nrLocalPixelElements.y; y++) {
			const ivec3 pixel_coords = world_compute_ID + ivec3(x, y, 0);
			computeSDF(pixel_coords);
		}
	}
}